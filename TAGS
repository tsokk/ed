
buffer.c,3484
static int current_addr_ = 0;	/* current address in editor buffer */current_addr_32,1031
static int last_addr_ = 0;	/* last address in editor buffer */last_addr_33,1100
static bool isbinary_ = false;	/* if set, buffer contains ASCII NULs */isbinary_34,1163
static bool modified_ = false;	/* if set, buffer modified since last write */modified_35,1235
static bool seek_write = false;	/* seek before writing */seek_write37,1314
static FILE * sfp = 0;		/* scratch file pointer */sfp38,1372
static long sfpos = 0;		/* scratch file position */sfpos39,1423
static line_t buffer_head;	/* editor buffer ( linked list of line_t )*/buffer_head40,1475
static line_t yank_buffer_head;yank_buffer_head41,1547
int current_addr( void ) { return current_addr_; }current_addr44,1581
int inc_current_addr( void )inc_current_addr45,1632
void set_current_addr( const int addr ) { current_addr_ = addr; }set_current_addr48,1756
int last_addr( void ) { return last_addr_; }last_addr50,1823
bool isbinary( void ) { return isbinary_; }isbinary52,1869
void set_binary( void ) { isbinary_ = true; }set_binary53,1913
bool modified( void ) { return modified_; }modified55,1960
void set_modified( const bool m ) { modified_ = m; }set_modified56,2004
int inc_addr( int addr )inc_addr59,2059
int dec_addr( int addr )dec_addr62,2140
static void link_nodes( line_t * const prev, line_t * const next )link_nodes67,2257
static void insert_node( line_t * const lp, line_t * const prev )insert_node72,2432
static void add_line_node( line_t * const lp )add_line_node80,2632
static line_t * dup_line_node( line_t * const lp )dup_line_node90,2887
bool append_lines( const char ** const ibufpp, const int addr,append_lines107,3341
static void clear_yank_buffer( void )clear_yank_buffer145,4377
bool close_sbuf( void )close_sbuf162,4691
bool copy_lines( const int first_addr, const int second_addr, const int addr )copy_lines183,5055
bool delete_lines( const int from, const int to, const bool isglobal )delete_lines217,5965
int get_line_node_addr( const line_t * const lp )get_line_node_addr238,6574
char * get_sbuf_line( const line_t * const lp )get_sbuf_line250,6908
bool init_buffers( void )init_buffers284,7700
bool join_lines( const int from, const int to, const bool isglobal )join_lines301,8165
bool move_lines( const int first_addr, const int second_addr, const int addr,move_lines333,9089
bool open_sbuf( void )open_sbuf378,10340
int path_max( const char * filename )path_max392,10575
bool put_lines( const int addr )put_lines405,10898
const char * put_sbuf_line( const char * const buf, const int size )put_sbuf_line435,11698
line_t * search_line_node( const int addr )search_line_node472,12633
bool yank_lines( const int from, const int to )yank_lines499,13325
static undo_t * ustack = 0;		/* undo stack */ustack520,13790
static int usize = 0;			/* ustack size (in bytes) */usize521,13836
static int u_ptr = 0;			/* undo stack pointer */u_ptr522,13889
static int u_current_addr = -1;		/* if < 0, undo disabled */u_current_addr523,13938
static int u_last_addr = -1;		/* if < 0, undo disabled */u_last_addr524,13999
static bool u_modified = false;u_modified525,14057
void clear_undo_stack( void )clear_undo_stack528,14091
void reset_undo_state( void )reset_undo_state551,14591
undo_t * push_undo_atom( const int type, const int from, const int to )push_undo_atom560,14757
bool undo( const bool isglobal )undo597,15751

carg_parser.c,974
static void * ap_resize_buffer( void * buf, const int min_size )ap_resize_buffer27,967
static char push_back_record( struct Arg_parser * const ap,push_back_record35,1133
static char add_error( struct Arg_parser * const ap, const char * const msg )add_error56,1764
static void free_data( struct Arg_parser * const ap )free_data68,2099
static char parse_long_option( struct Arg_parser * const ap,parse_long_option77,2315
static char parse_short_option( struct Arg_parser * const ap,parse_short_option149,4537
char ap_init( struct Arg_parser * const ap,ap_init199,5956
void ap_free( struct Arg_parser * const ap )ap_free258,7785
const char * ap_error( const struct Arg_parser * const ap )ap_error266,7937
int ap_arguments( const struct Arg_parser * const ap )ap_arguments270,8023
int ap_code( const struct Arg_parser * const ap, const int i )ap_code274,8108
const char * ap_argument( const struct Arg_parser * const ap, const int i )ap_argument281,8264

carg_parser.h,744
enum ap_Has_arg { ap_no, ap_yes, ap_maybe };ap_Has_arg48,1950
enum ap_Has_arg { ap_no, ap_yes, ap_maybe };ap_no48,1950
enum ap_Has_arg { ap_no, ap_yes, ap_maybe };ap_yes48,1950
enum ap_Has_arg { ap_no, ap_yes, ap_maybe };ap_maybe48,1950
struct ap_Optionap_Option50,1996
  int code;			/* Short option letter or code ( code != 0 ) */code52,2017
  const char * name;		/* Long option name (maybe null) */name53,2079
  enum ap_Has_arg has_arg;has_arg54,2137
struct ap_Recordap_Record58,2171
  int code;code60,2192
  char * argument;argument61,2204
struct Arg_parserArg_parser65,2230
  struct ap_Record * data;data67,2252
  char * error;error68,2279
  int data_size;data_size69,2295
  int error_size;error_size70,2312

config.status,0

configure,0

ed.h,1266
enum Bool { false = 0, true = 1 };Bool21,847
enum Bool { false = 0, true = 1 };false21,847
enum Bool { false = 0, true = 1 };true21,847
typedef enum Bool bool;bool22,882
enum Pflags			/* print suffixes */Pflags25,914
  GLS = 0x01,			/* list after command */GLS27,953
  GNP = 0x02,			/* enumerate after command */GNP28,994
  GPR = 0x04			/* print after command */GPR29,1040
typedef struct line		/* Line node */line33,1088
  struct line * q_forw;q_forw35,1129
  struct line * q_back;q_back36,1153
  long pos;			/* position of text in scratch buffer */pos37,1177
  int len;			/* length of line ('\n' is not stored) */len38,1232
line_t;line_t40,1291
  enum { UADD = 0, UDEL = 1, UMOV = 2, VMOV = 3 } type;UADD45,1320
  enum { UADD = 0, UDEL = 1, UMOV = 2, VMOV = 3 } type;UDEL45,1320
  enum { UADD = 0, UDEL = 1, UMOV = 2, VMOV = 3 } type;UMOV45,1320
  enum { UADD = 0, UDEL = 1, UMOV = 2, VMOV = 3 } type;VMOV45,1320
  enum { UADD = 0, UDEL = 1, UMOV = 2, VMOV = 3 } type;type45,1320
  line_t * head;			/* head of list */head46,1376
  line_t * tail;			/* tail of list */tail47,1414
undo_t;undo_t49,1456
#define max(max52,1477
#define min(min55,1551
static const char * const mem_msg = "Memory exhausted";mem_msg58,1614

global.c,746
static const line_t **active_list = 0;	/* list of lines active in a global command */active_list28,941
static int active_size = 0;	/* size (in bytes) of active_list */active_size29,1027
static int active_len = 0;	/* number of lines in active_list */active_len30,1092
static int active_ptr = 0;	/* active_list index ( non-decreasing ) */active_ptr31,1156
static int active_ndx = 0;	/* active_list index ( modulo active_last ) */active_ndx32,1226
void clear_active_list( void )clear_active_list36,1337
const line_t * next_active_node( void )next_active_node47,1589
bool set_active_node( const line_t * const lp )set_active_node56,1838
void unset_active_nodes( const line_t * bp, const line_t * const ep )unset_active_nodes83,2588

io.c,1356
static const line_t * unterminated_line = 0;	/* last line has no '\n' */unterminated_line27,906
static int linenum_ = 0;			/* script line number */linenum_28,979
int linenum( void ) { return linenum_; }linenum30,1032
void reset_unterminated_line( void ) { unterminated_line = 0; }reset_unterminated_line32,1074
void unmark_unterminated_line( const line_t * const lp )unmark_unterminated_line34,1139
static bool unterminated_last_line( void )unterminated_last_line37,1256
static void print_line( const char * p, int len, const int pflags )print_line43,1438
bool print_lines( int from, const int to, const int pflags )print_lines81,2487
static bool trailing_escape( const char * const s, int len )trailing_escape100,2981
bool get_extended_line( const char ** const ibufpp, int * const lenp,get_extended_line112,3395
const char * get_stdin_line( int * const sizep )get_stdin_line150,4722
static const char * read_stream_line( const char * const filename,read_stream_line190,5725
static long read_stream( const char * const filename, FILE * const fp,read_stream227,6641
int read_file( const char * const filename, const int addr )read_file272,8173
static long write_stream( const char * const filename, FILE * const fp,write_stream301,8907
int write_file( const char * const filename, const char * const mode,write_file330,9649

main.c,1369
static const char * const program_name = "ed";program_name45,1443
static const char * const program_year = "2021";program_year46,1490
static const char * invocation_name = "ed";		/* default value */invocation_name47,1539
static bool extended_regexp_ = false;	/* if set, use EREs */extended_regexp_49,1605
static bool restricted_ = false;	/* if set, run in restricted mode */restricted_50,1666
static bool scripted_ = false;		/* if set, suppress diagnostics,scripted_51,1736
static bool traditional_ = false;	/* if set, be backwards compatible */traditional_53,1839
bool extended_regexp( void ) { return extended_regexp_; }extended_regexp56,1959
bool restricted( void ) { return restricted_; }restricted57,2017
bool scripted( void ) { return scripted_; }scripted58,2065
bool traditional( void ) { return traditional_; }traditional59,2109
static void show_help( void )show_help62,2161
static void show_version( void )show_version94,4181
void show_strerror( const char * const filename, const int errcode )show_strerror105,4639
static void show_error( const char * const msg, const int errcode, const bool help )show_error115,4872
bool is_regular_file( const int fd )is_regular_file128,5310
bool may_access_filename( const char * const name )may_access_filename135,5436
int main( const int argc, const char * const argv[] )main147,5689

main_loop.c,3312
enum Status { QUIT = -1, ERR = -2, EMOD = -3, FATAL = -4 };Status30,937
enum Status { QUIT = -1, ERR = -2, EMOD = -3, FATAL = -4 };QUIT30,937
enum Status { QUIT = -1, ERR = -2, EMOD = -3, FATAL = -4 };ERR30,937
enum Status { QUIT = -1, ERR = -2, EMOD = -3, FATAL = -4 };EMOD30,937
enum Status { QUIT = -1, ERR = -2, EMOD = -3, FATAL = -4 };FATAL30,937
static const char * const inv_com_suf = "Invalid command suffix";inv_com_suf32,998
static const char * const inv_mark_ch = "Invalid mark character";inv_mark_ch33,1064
static const char * const no_cur_fn = "No current filename";no_cur_fn34,1130
static const char * def_filename = "";	/* default filename */def_filename35,1191
static char errmsg[80] = "";		/* error message buffer */errmsg36,1253
static const char * prompt_str = "*";	/* command prompt */prompt_str37,1310
static int first_addr = 0, second_addr = 0;first_addr38,1369
static int first_addr = 0, second_addr = 0;second_addr38,1369
static bool prompt_on = false;		/* if set, show command prompt */prompt_on39,1413
static bool verbose = false;		/* if set, print all error messages */verbose40,1479
void invalid_address( void ) { set_error_msg( "Invalid address" ); }invalid_address43,1550
bool set_def_filename( const char * const s )set_def_filename45,1620
void set_error_msg( const char * const msg )set_error_msg56,1935
bool set_prompt( const char * const s )set_prompt62,2062
void set_verbose( void ) { verbose = true; }set_verbose74,2385
static const line_t * mark[26];			/* line markers */mark77,2432
static int markno;				/* line marker count */markno78,2485
static bool mark_line_node( const line_t * const lp, int c )mark_line_node80,2532
void unmark_line_node( const line_t * const lp )unmark_line_node90,2746
static int get_marked_node_addr( int c )get_marked_node_addr100,2947
static const char * get_shell_command( const char ** const ibufpp )get_shell_command109,3189
static const char * skip_blanks( const char * p )skip_blanks157,4857
static const char * get_filename( const char ** const ibufpp,get_filename165,5052
static bool parse_int( int * const i, const char * const str,parse_int194,6019
static int extract_addresses( const char ** const ibufpp )extract_addresses223,6802
static bool get_third_addr( const char ** const ibufpp, int * const addr )get_third_addr303,9739
static bool check_addr_range( const int n, const int m, const int addr_cnt )check_addr_range321,10310
static bool check_addr_range2( const int addr_cnt )check_addr_range2330,10668
static bool check_second_addr( const int addr, const int addr_cnt )check_second_addr336,10870
static bool get_command_suffix( const char ** const ibufpp,get_command_suffix346,11155
static bool unexpected_address( const int addr_cnt )unexpected_address375,12143
static bool unexpected_command_suffix( const unsigned char ch )unexpected_command_suffix381,12298
static bool command_s( const char ** const ibufpp, int * const pflagsp,command_s389,12478
static int exec_command( const char ** const ibufpp, const int prev_status,exec_command455,14996
static int exec_global( const char ** const ibufpp, const int pflags,exec_global664,24975
static void script_error( void )script_error718,26543
int main_loop( const bool loose )main_loop724,26665

Makefile,1051
pkgname = edpkgname8,260
pkgversion = 1.17pkgversion9,273
progname = edprogname10,291
VPATH = .VPATH11,305
prefix = /usr/localprefix12,315
exec_prefix = $(prefix)exec_prefix13,335
bindir = $(exec_prefix)/binbindir14,359
datarootdir = $(prefix)/sharedatarootdir15,387
infodir = $(datarootdir)/infoinfodir16,417
mandir = $(datarootdir)/manmandir17,447
program_prefix = program_prefix18,475
CC = gccCC19,493
CPPFLAGS = CPPFLAGS20,502
CFLAGS = -Wall -W -O2CFLAGS21,514
LDFLAGS = LDFLAGS22,536
DISTNAME = $(pkgname)-$(pkgversion)DISTNAME24,548
INSTALL = installINSTALL25,584
INSTALL_PROGRAM = $(INSTALL) -m 755INSTALL_PROGRAM26,602
INSTALL_SCRIPT = $(INSTALL) -m 755INSTALL_SCRIPT27,638
INSTALL_DATA = $(INSTALL) -m 644INSTALL_DATA28,673
INSTALL_DIR = $(INSTALL) -d -m 755INSTALL_DIR29,706
SHELL = /bin/shSHELL30,741
CAN_RUN_INSTALLINFO = $(SHELL) -c "install-info --version" > /dev/null 2>&1CAN_RUN_INSTALLINFO31,757
objs = buffer.o carg_parser.o global.o io.o main.o main_loop.o regex.o signal.oobjs33,834

red,0

red.in,0

regex.c,1742
static const char * const inv_pat_del = "Invalid pattern delimiter";inv_pat_del30,994
static const char * const no_match = "No match";no_match31,1063
static regex_t * subst_regex_ = 0;	/* regex of previous substitution */subst_regex_32,1112
static char * rbuf = 0;		/* replacement buffer */rbuf34,1185
static int rbufsz = 0;		/* replacement buffer size */rbufsz35,1235
static int rlen = 0;		/* replacement length */rlen36,1289
bool subst_regex( void ) { return subst_regex_ != 0; }subst_regex39,1338
static void translit_text( char * p, int len, const char from, const char to )translit_text43,1434
static void newline_to_nul( char * const s, const int len )newline_to_nul54,1637
static void nul_to_newline( char * const s, const int len )nul_to_newline58,1782
static const char * parse_char_class( const char * p )parse_char_class63,1924
static char * extract_pattern( const char ** const ibufpp, const char delimiter )extract_pattern79,2382
static regex_t * get_compiled_regex( const char ** const ibufpp,get_compiled_regex109,3214
bool set_subst_regex( const char ** const ibufpp )set_subst_regex144,4300
bool build_active_list( const char ** const ibufpp, const int first_addr,build_active_list161,4693
int next_matching_node_addr( const char ** const ibufpp, const bool forward )next_matching_node_addr190,5670
bool extract_replacement( const char ** const ibufpp, const bool isglobal )extract_replacement215,6416
static int replace_matched_text( char ** txtbufp, int * const txtbufszp,replace_matched_text260,8018
static int line_replace( char ** txtbufp, int * const txtbufszp,line_replace297,9309
bool search_and_replace( const int first_addr, const int second_addr,search_and_replace352,11389

signal.c,1283
jmp_buf jmp_state;			/* jumps to main_loop */jmp_state33,1056
static int mutex = 0;			/* if > 0, signals stay pending */mutex34,1102
static int window_lines_ = 22;		/* scroll lines set by sigwinch_handler */window_lines_35,1161
static int window_columns_ = 72;window_columns_36,1236
static bool sighup_pending = false;sighup_pending37,1269
static bool sigint_pending = false;sigint_pending38,1305
static void sighup_handler( int signum )sighup_handler41,1343
static void sigint_handler( int signum )sigint_handler71,2301
static void sigwinch_handler( int signum )sigwinch_handler86,2581
static int set_signal( const int signum, void (*handler)( int ) )set_signal102,3020
void enable_interrupts( void )enable_interrupts117,3341
void disable_interrupts( void ) { ++mutex; }disable_interrupts128,3532
void set_signals( void )set_signals131,3579
void set_window_lines( const int lines ) { window_lines_ = lines; }set_window_lines143,3845
int window_columns( void ) { return window_columns_; }window_columns144,3913
int window_lines( void ) { return window_lines_; }window_lines145,3968
bool resize_buffer( char ** const buf, int * const size, const int min_size )resize_buffer149,4075
const char * strip_escapes( const char * p )strip_escapes174,4703
