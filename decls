bool close_sbuf( void );
bool copy_lines( const int first_addr, const int second_addr, const int addr );
bool delete_lines( const int from, const int to, const bool isglobal );
bool init_buffers( void );
bool isbinary( void ) { return isbinary_; };
bool join_lines( const int from, const int to, const bool isglobal );
bool modified( void ) { return modified_; };
bool open_sbuf( void );
bool put_lines( const int addr );
bool undo( const bool isglobal );
bool yank_lines( const int from, const int to );
char * get_sbuf_line( const line_t * const lp );
const char * put_sbuf_line( const char * const buf, const int size );
int current_addr( void ) { return current_addr_; };
int dec_addr( int addr );
int get_line_node_addr( const line_t * const lp );
int inc_addr( int addr );
int inc_current_addr( void );
int last_addr( void ) { return last_addr_; };
int path_max( const char * filename );
line_t * search_line_node( const int addr );
static int usize = 0;			/* ustack size (in bytes) */;
static line_t buffer_head;	/* editor buffer ( linked list of line_t )*/;
static line_t * dup_line_node( line_t * const lp );
static void add_line_node( line_t * const lp );
static void clear_yank_buffer( void );
static void insert_node( line_t * const lp, line_t * const prev );
static void link_nodes( line_t * const prev, line_t * const next );
undo_t * push_undo_atom( const int type, const int from, const int to );
void clear_undo_stack( void );
void reset_undo_state( void );
void set_binary( void ) { isbinary_ = true; };
void set_current_addr( const int addr ) { current_addr_ = addr; };
void set_modified( const bool m ) { modified_ = m; };
bool set_active_node( const line_t * const lp );
const line_t * next_active_node( void );
static int active_ndx = 0;	/* active_list index ( modulo active_last ) */;
static int active_ptr = 0;	/* active_list index ( non-decreasing ) */;
static int active_size = 0;	/* size (in bytes) of active_list */;
void clear_active_list( void );
void unset_active_nodes( const line_t * bp, const line_t * const ep );
bool print_lines( int from, const int to, const int pflags );
const char * get_stdin_line( int * const sizep );
int linenum( void ) { return linenum_; };
int read_file( const char * const filename, const int addr );
static bool trailing_escape( const char * const s, int len );
static bool unterminated_last_line( void );
static void print_line( const char * p, int len, const int pflags );
void reset_unterminated_line( void ) { unterminated_line = 0; };
void unmark_unterminated_line( const line_t * const lp );
bool extended_regexp( void ) { return extended_regexp_; };
bool is_regular_file( const int fd );
bool may_access_filename( const char * const name );
bool restricted( void ) { return restricted_; };
bool scripted( void ) { return scripted_; };
bool traditional( void ) { return traditional_; };
int main( const int argc, const char * const argv[] );
static void show_error( const char * const msg, const int errcode, const bool help );
static void show_help( void );
static void show_version( void );
void show_strerror( const char * const filename, const int errcode );
bool set_def_filename( const char * const s );
bool set_prompt( const char * const s );
int main_loop( const bool loose );
static bool check_addr_range2( const int addr_cnt );
static bool check_addr_range( const int n, const int m, const int addr_cnt );
static bool check_second_addr( const int addr, const int addr_cnt );
static bool get_third_addr( const char ** const ibufpp, int * const addr );
static bool mark_line_node( const line_t * const lp, int c );
static bool unexpected_address( const int addr_cnt );
static bool unexpected_command_suffix( const unsigned char ch );
static const char * get_shell_command( const char ** const ibufpp );
static const char * skip_blanks( const char * p );
static int extract_addresses( const char ** const ibufpp );
static int get_marked_node_addr( int c );
static void script_error( void );
void invalid_address( void ) { set_error_msg( "Invalid address" ); };
void set_error_msg( const char * const msg );
void set_verbose( void ) { verbose = true; };
void unmark_line_node( const line_t * const lp );
bool extract_replacement( const char ** const ibufpp, const bool isglobal );
bool set_subst_regex( const char ** const ibufpp );
bool subst_regex( void ) { return subst_regex_ != 0; };
int next_matching_node_addr( const char ** const ibufpp, const bool forward );
static char * extract_pattern( const char ** const ibufpp, const char delimiter );
static const char * parse_char_class( const char * p );
static void newline_to_nul( char * const s, const int len );
static void nul_to_newline( char * const s, const int len );
static void translit_text( char * p, int len, const char from, const char to );
bool resize_buffer( char ** const buf, int * const size, const int min_size );
const char * strip_escapes( const char * p );
int window_columns( void ) { return window_columns_; };
int window_lines( void ) { return window_lines_; };
static int set_signal( const int signum, void (*handler)( int ) );
static void sighup_handler( int signum );
static void sigint_handler( int signum );
static void sigwinch_handler( int signum );
void disable_interrupts( void ) { ++mutex; };
void enable_interrupts( void );
void set_signals( void );
void set_window_lines( const int lines ) { window_lines_ = lines; };
